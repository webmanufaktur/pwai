{
    "config-rockshell": {
        "prefix": "config-rockshell",
        "body": [
            "\\$config->rockshell = [",
            "  \/\/ 'remotePHP' => 'keyhelp-php81',",
            "  'remotes' => [",
            "    'staging' => [",
            "      'ssh' => 'user@host.com',",
            "      'dir' => '\/path\/to\/webroot\/current',",
            "    ],",
            "  ],",
            "];"
        ],
        "description": "rockshell config"
    },
    "config-tracy": {
        "prefix": "config-tracy",
        "body": [
            "\\$config->tracy = [",
            "  \/\/ use this only on local dev!!!!",
            "  'outputMode' => 'development',",
            "  'guestForceDevelopmentLocal' => true,",
            "  'forceIsLocal' => true,",
            "",
            "  'localRootPath' => getenv(\"DDEV_APPROOT\"),",
            "  'numLogEntries' => 100, \/\/ for RockMigrations",
            "  \/\/ 'editor' => 'cursor:\/\/file\/%file:%line',",
            "];"
        ],
        "description": "tracy config"
    },
    "pageclass": {
        "prefix": "pageclass",
        "body": [
            "<?php",
            "",
            "namespace ProcessWire;",
            "",
            "use RockMigrations\\MagicPage;",
            "",
            "class $1Page extends ${2:Page}",
            "{",
            "  use MagicPage;",
            "",
            "  const tpl='$3';",
            "  const prefix='$3_';",
            "  $0",
            "}"
        ],
        "description": "Create a custom pageclass using magicpages"
    },
    "pw-404exception": {
        "prefix": "pw-404exception",
        "body": [
            "throw new Wire404Exception(\"$1\");"
        ],
        "description": "ProcessWire 404 Exception"
    },
    "pw-configinputfields": {
        "prefix": "pw-configinputfields",
        "body": [
            "\/**",
            "  * Config inputfields",
            "  * @param InputfieldWrapper \\$inputfields",
            "  *\/",
            "public function getModuleConfigInputfields(\\$inputfields) {",
            "  return \\$inputfields;",
            "}"
        ],
        "description": "Add config inputfields to module"
    },
    "pw-createmodule": {
        "prefix": "pw-createmodule",
        "body": [
            "<?php",
            "",
            "namespace ProcessWire;",
            "",
            "${0:\/\/ info snippet}",
            "class ${1:Classname} extends WireData implements Module, ConfigurableModule {",
            "",
            "  public static function getModuleInfo() {",
            "    return [",
            "      'title' => '${1:Classname}',",
            "      'version' => '0.0.1',",
            "      'summary' => '${3:Your module description}',",
            "      'autoload' => ${4:true},",
            "      'singular' => ${5:true},",
            "      'icon' => '${6:smile-o}',",
            "      'requires' => [],",
            "      'installs' => [],",
            "    ];",
            "  }",
            "",
            "  public function init() {",
            "  }",
            "",
            "  \/**",
            "   * Config inputfields",
            "   * @param InputfieldWrapper \\$inputfields",
            "   *\/",
            "  public function getModuleConfigInputfields(\\$inputfields) {",
            "    return \\$inputfields;",
            "  }",
            "",
            "}"
        ],
        "description": "Regular Module Boilerplate"
    },
    "pw-exception": {
        "prefix": "pw-exception",
        "body": [
            "throw new WireException(\"$1\");"
        ],
        "description": "ProcessWire Exception"
    },
    "pw-fieldtype": {
        "prefix": "pw-fieldtype",
        "body": [
            "${0:\/\/ info snippet}",
            "class Fieldtype${1:Classname} extends Fieldtype${2:TextLanguage} {",
            "",
            "  public static function getModuleInfo() {",
            "    return [",
            "      'title' => '${1:Classname}',",
            "      'version' => '0.0.1',",
            "      'summary' => '${4:Your module description}',",
            "      'icon' => '${5:smile-o}',",
            "      'requires' => [],",
            "      'installs' => [],",
            "    ];",
            "  }",
            "",
            "  public function init() {",
            "    parent::init();",
            "  }",
            "",
            "  \/** FIELDTYPE METHODS *\/",
            "",
            "  \/**",
            "   * Sanitize value for storage",
            "   *",
            "   * @param Page \\$page",
            "   * @param Field \\$field",
            "   * @param string \\$value",
            "   * @return string",
            "   *\/",
            "  public function sanitizeValue(Page \\$page, Field \\$field, \\$value) {",
            "    return \\$value;",
            "  }",
            "",
            "  \/** HELPER METHODS *\/",
            "}"
        ],
        "description": "Fieldtype Module Boilerplate"
    },
    "pw-getmodule": {
        "prefix": "pw-getmodule",
        "body": [
            "\/** @var $1 $$2 *\/",
            "$$2 = wire()->modules->get('$1');",
            "$$2$0"
        ],
        "description": "Load a processwire module"
    },
    "pw-info": {
        "prefix": "pw-info",
        "body": [
            "<?php",
            "",
            "namespace ProcessWire;",
            "",
            "\\$info = [",
            "  'title' => '',",
            "  'version' => json_decode(file_get_contents(__DIR__ . \"\/package.json\"))->version,",
            "  'summary' => '',",
            "  'autoload' => true,",
            "  'singular' => true,",
            "  'icon' => 'magic',",
            "  \/\/ requires php8.0 because of symfony yaml (also set in composer.json)",
            "  'requires' => [",
            "    'PHP>=8.0',",
            "  ],",
            "  'installs' => [],",
            "];"
        ],
        "description": "ProcessWire Module Info"
    },
    "pw-inputfield": {
        "prefix": "pw-inputfield",
        "body": [
            "${0:\/\/ info snippet}",
            "class Inputfield${1:Foo} extends Inputfield${2:Textarea} {",
            "",
            "  public static function getModuleInfo() {",
            "    return [",
            "      'title' => '${1:Foo} Inputfield',",
            "      'version' => '0.0.1',",
            "      'summary' => '${4:Your module description}',",
            "      'icon' => '${5:smile-o}',",
            "      'requires' => [],",
            "      'installs' => [],",
            "    ];",
            "  }",
            "",
            "  \/**",
            "  * Render the Inputfield",
            "  * @return string",
            "  *\/",
            "  public function ___render() {",
            "    return 'Inputfield RENDER';",
            "  }",
            "",
            "  \/**",
            "  * Process the Inputfield's input",
            "  * @return \\$this",
            "  *\/",
            "  public function ___processInput(\\$input) {",
            "    \\$this->message('process input!');",
            "    return false;",
            "  }",
            "",
            "}"
        ],
        "description": "Inputfield Module Boilerplate"
    },
    "pw-process-execute": {
        "prefix": "pw-process-execute",
        "body": [
            "\/**",
            " * $0",
            " *\/",
            "public function execute$1() {",
            "  \\$this->headline('$2');",
            "  \\$this->browserTitle('$2');",
            "  \/** @var InputfieldForm \\$form *\/",
            "  \\$form = \\$this->wire->modules->get('InputfieldForm');",
            "",
            "  \\$form->add([",
            "    'type' => 'markup',",
            "    'label' => 'foo',",
            "    'value' => 'bar',",
            "  ]);",
            "",
            "  return \\$form->render();",
            "}"
        ],
        "description": "ProcessModule Execute Method Boilerplate"
    },
    "pw-processmodule": {
        "prefix": "pw-processmodule",
        "body": [
            "${0:\/\/ info snippet}",
            "class Process$1 extends Process {",
            "  public static function getModuleInfo() {",
            "    return [",
            "      'title' => '$2',",
            "      'version' => '${3:0.0.1}',",
            "      'summary' => '$4',",
            "      'icon' => '$5',",
            "      'requires' => [],",
            "      'installs' => [],",
            "",
            "      \/\/ name of permission required of users to execute this Process (optional)",
            "      'permission' => 'foo',",
            "      \/\/ permissions that you want automatically installed\/uninstalled with this module (name => description)",
            "      'permissions' => ['foo' => 'May run the foo module'],",
            "",
            "      \/\/ page that you want created to execute this module",
            "      'page' => [",
            "        'name' => 'helloworld',",
            "        'parent' => 'setup',",
            "        'title' => 'Hello World'",
            "      ],",
            "",
            "      \/\/ optional extra navigation that appears in admin",
            "      \/\/ if you change this, you'll need to a Modules > Refresh to see changes",
            "      'nav' => [",
            "        [",
            "          'url' => '',",
            "          'label' => 'Hello',",
            "          'icon' => 'smile-o',",
            "        ],[",
            "          'url' => 'something\/',",
            "          'label' => 'Something',",
            "          'icon' => 'beer',",
            "        ],",
            "      ]",
            "    ];",
            "  }",
            "",
            "  public function init() {",
            "    parent::init(); \/\/ always remember to call the parent init",
            "  }",
            "",
            "  public function execute() {",
            "    return \"something\";",
            "  }",
            "}"
        ],
        "description": "ProcessModule Boilerplate"
    },
    "pw-sql-query": {
        "prefix": "pw-sql-query",
        "body": [
            "\/\/ do proper sanitization!!!",
            "\\$result = \\$this->database->query(\"${1:SELECT * FROM pages LIMIT 5}\");",
            "\\$${2:foo} = \\$result->fetchAll(\\PDO::FETCH_OBJ);",
            "d(\\$${2:foo});$0"
        ],
        "description": "SQL Database Query"
    },
    "pw-textformatter": {
        "prefix": "pw-textformatter",
        "body": [
            "${0:\/\/ info snippet}",
            "class TextformatterDemo extends Textformatter {",
            "  public static function getModuleInfo() {",
            "    return [",
            "      'title' => 'Demo',",
            "      'version' => '1.0.0',",
            "      'summary' => 'Demo Textformatter',",
            "    ];",
            "  }",
            "",
            "  public function format(&$str) {",
            "    $str = 'Demo Formatted: '.$str;",
            "  }",
            "}"
        ],
        "description": "ProcessWire Textformatter Boilerplate"
    },
    "pw-version": {
        "prefix": "pw-version",
        "body": [
            "json_decode(file_get_contents(__DIR__ . \"\/package.json\"))->version"
        ],
        "description": "load module version from package.json"
    },
    "pw": {
        "prefix": "pw",
        "body": [
            "<?php",
            "",
            "namespace ProcessWire;",
            "",
            "$0"
        ],
        "description": "Add the ProcessWire namespace"
    }
}